{
  "name": "grunt-newer",
  "description": "Run Grunt tasks with only those source files modified since the last successful run.",
  "version": "0.6.1",
  "homepage": "https://github.com/tschaub/grunt-newer",
  "author": {
    "name": "Tim Schaub",
    "url": "http://tschaub.net/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tschaub/grunt-newer.git"
  },
  "bugs": {
    "url": "https://github.com/tschaub/grunt-newer/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://tschaub.mit-license.org/"
    }
  ],
  "main": "gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test",
    "start": "grunt test watch"
  },
  "devDependencies": {
    "grunt": "0.4.2",
    "grunt-cli": "0.1.11",
    "grunt-contrib-watch": "0.5.3",
    "grunt-contrib-jshint": "0.7.2",
    "chai": "1.8.1",
    "grunt-cafe-mocha": "0.1.10",
    "wrench": "1.5.4",
    "tmp": "0.0.21",
    "grunt-contrib-clean": "0.5.0",
    "mock-fs": "2.x"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "grunt",
    "newer",
    "files"
  ],
  "dependencies": {
    "async": "0.2.9",
    "rimraf": "2.2.4"
  },
  "readme": "# grunt-newer\n\nConfigure [Grunt](http://gruntjs.com/) tasks to run with newer files only.\n\n**Synopsis:**  The [`newer`](#newer) task will configure another task to run with `src` files that are *a)* newer than the `dest` files or *b)* newer than the last successful run (if there are no `dest` files).  See below for examples and more detail.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [`gruntfile.js`](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-newer --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your `gruntfile.js` with this line:\n\n```js\ngrunt.loadNpmTasks('grunt-newer');\n```\n\n<a name=\"newer\"></a>\n## The `newer` task\n\nThe `newer` task doesn't require any special configuration.  To use it, just add `newer` as the first argument when running other tasks.\n\nFor example, if you want to use [Uglify](https://npmjs.org/package/grunt-contrib-uglify) to minify your source files only when one or more of them is newer than the previously minified destination file, configure the `uglify` task as you would otherwise, and then register a task with `newer` at the front.\n\n```js\n  grunt.initConfig({\n    uglify: {\n      all: {\n        files: {\n          'dest/app.min.js': ['src/**/*.js']\n        }\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-newer');\n\n  grunt.registerTask('minify', ['newer:uglify:all']);\n```\n\nWith the above configuration the `minify` task will only run `uglify` if one or more of the `src/**/*.js` files is newer than the `dest/app.min.js` file.\n\nThe above example shows how the `newer` task works with other tasks that specify both `src` and `dest` files.  In this case, the modification time of `src` files are compared to modification times of corresponding `dest` files to determine which `src` files to include.\n\nThe `newer` task can also be used with tasks that don't generate any `dest` files.  In this case, `newer` will only use files that are newer than the last successful run of the same task.\n\nFor example, if you want to run [JSHint](https://npmjs.org/package/grunt-contrib-jshint) on only those files that have been modified since the last successful run, configure the `jshint` task as you would otherwise, and then register a task with `newer` at the front.\n\n```js\n  grunt.initConfig({\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc'\n      },\n      all: {\n        src: 'src/**/*.js'\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-newer');\n\n  grunt.registerTask('lint', ['newer:jshint:all']);\n```\n\nWith the above configuration, running `grunt lint` will configure your `jshint:all` task to use only files in the `jshint.all.src` config that have been modified since the last successful run of the same task.  The first time the `jshint:newer:all` task runs, all source files will be used.  After that, only the files you modify will be run through the linter.\n\nAnother example is to use the `newer` task in conjunction with `watch`.  For example, you might want to set up a watch to run a linter on all your `.js` files whenever one changes.  With the `newer` task, instead of re-running the linter on all files, you only need to run it on the files that changed.\n\n```js\n  var srcFiles = 'src/**/*.js';\n\n  grunt.initConfig({\n    jshint: {\n      all: {\n        src: srcFiles\n      }\n    },\n    watch: {\n      all: {\n        files: srcFiles,\n        tasks: ['newer:jshint:all']\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-newer');\n\n```\n\nWith the above configuration, running `grunt jshint watch` will first lint all your files with `jshint` and then set up a watch.  Whenever one of your source files changes, the `jshint` task will be run on just the modified file.\n\n*Note:* If your task is configured with `dest` files, `newer` will run your task with only those files that are newer than the corresponding `dest` files.\n\n## Options for the `newer` task\n\nIn most cases, you shouldn't need to add any special configuration for the `newer` task.  Just `grunt.loadNpmTasks('grunt-newer')` and you can use `newer` as a prefix to your other tasks.  The single option below is available if you need a custom configuration.\n\n#### <a id=\"optionscache\">options.cache</a>\n * type: `string`\n * default: `node_modules/grunt-newer/.cache`\n\nTo keep track of timestamps for successful runs, the `newer` task writes to a cache directory.  The default is to use a `.cache` directory within the `grunt-newer` installation directory.  If you need timestamp info to be written to a different location, configure the task with a `cache` option.\n\nExample use of the `cache` option:\n\n```js\n  grunt.initConfig({\n    newer: {\n      options: {\n        cache: 'path/to/custom/cache/directory'\n      }\n    }\n  });\n```\n\n## That's it\n\nPlease [submit an issue](https://github.com/tschaub/grunt-newer/issues) if you encounter any trouble.  Contributions or suggestions for improvements welcome!\n\n[![Current Status](https://secure.travis-ci.org/tschaub/grunt-newer.png?branch=master)](https://travis-ci.org/tschaub/grunt-newer)\n\n## Known limitations\n\nThe `newer` task relies on Grunt's convention for specifying [`src`/`dest` mappings](http://gruntjs.com/configuring-tasks#files).  So it should be expected to work with two types of tasks:\n\n1) Tasks that specify both `src` and `dest` files.  In this case, the task prefixed by `newer` will be configured to run with `src` files that are newer than the corresponding `dest` file (based on the `mtime` of files).\n\n2) Tasks that specify only `src` files.  In this case, the task prefixed by `newer` will be configured to run with `src` files that are newer than the previous successful run of the same task.\n\nThe `newer` task will *not* work as a prefix for the following tasks:\n\n * [`grunt-rsync`](http://npmjs.org/package/grunt-rsync) - Though this task specifies `src` and `dest` files, the `dest` file is not generated based on `src` files (instead it is a directory).\n\n * [`grunt-spritesmith`](https://npmjs.org/package/grunt-spritesmith) - This task uses multiple `src` images to produce `destImg` and `destCSS` files.  Instead use the [`grunt-spritely`](https://npmjs.org/package/grunt-spritely) task configured with `src` and `dest` files.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-newer@0.6.1",
  "_from": "grunt-newer@~0.6.1"
}
