{"source_files":[{"name":"dist/angular-validation-messages.js","source":"/**\n * Created by Gabriel_Grinberg on 6/13/14.\n */\n\n\n(function(){\n 'use strict';\n angular.module('gg.vmsgs',[]);\n\n\n})();\n\n/**\n * Created by Gabriel Grinberg on 6/13/14.\n */\n\n(function () {\n    'use strict';\n    angular.module('gg.vmsgs')\n        .directive('vmsg', function (ValidationsHelper, $compile, $timeout) {\n            var defaultOptions = ValidationsHelper.defaultOptions,\n                messageTriggers = ValidationsHelper.messageTriggers;\n\n            return {\n                scope: {\n                    messages: '='\n                },\n                require: ['ngModel', '^vmsgForm', '^form'],\n                compile: function (elm, attrs) {\n\n\n                    return{\n                        pre:function prelink(scope,elm,attrs){\n                            scope.showMessage=false;\n                            scope._forceShowMessage=false;\n                            scope.errorMessage = '';\n                        },\n                        post:function link(scope, elm, attrs, ctrls) {\n\n                            var ngModelCtrl = ctrls[0],\n                                vtFormCtrl = ctrls[1],\n                                options = {\n                                    messageTrigger: attrs.messageTrigger || vtFormCtrl.getControlMessageTrigger() || defaultOptions.inputMessageTrigger\n                                },\n                                messageParent = $compile(defaultOptions.baseTemplate)(scope),\n                                messageElement = $compile(attrs.notificationTemplate || vtFormCtrl.getNotificationTemplate() || defaultOptions.notificationTemplate)(scope);\n\n\n                            messageParent.append(messageElement);\n                            elm.after(messageParent);\n                            elm.data('vtValidationNode', messageParent);\n\n                            //set up the triggers that will show the message\n                            switch (options.messageTrigger) {\n                                case messageTriggers.onBlur:\n                                    elm.on('blur', function () {\n                                        scope.$apply(function () {\n                                            showMessageIfNeeded();\n                                        });\n                                    });\n                                    break;\n\n                                /* TODO - decide if this trigger is needed. Doesn't sound useful\n                                case messageTriggers.immediate:\n                                    scope.$watch(function () {\n                                        return ngModelCtrl.$valid;\n                                    },function(){\n                                        showMessageIfNeeded();\n                                    });\n                                    //$timeout(showMessageIfNeeded);//TODO - think why this is needed, because it doesn't work otherwise!\n                                    break; */\n                                case messageTriggers.onDirty:\n                                    scope.$watch(function () {\n                                        return ngModelCtrl.$viewValue\n                                    }, function () {\n                                        if (ngModelCtrl.$dirty) {\n                                            showMessageIfNeeded();\n                                        }\n                                    });\n                                    break;\n                                case messageTriggers.dontShow:\n                                    break;\n                                default:\n                                    throw new Error('Message trigger ' + options.messageTrigger + ' is not supported!');\n                                    break;\n                            }\n\n                            scope.$watch(function () {\n                                return ngModelCtrl.$valid;\n                            }, function (isValid) {\n                                if (isValid) {\n                                    showMessageIfNeeded();\n                                }\n\n                            });\n\n                            scope.forceShowMessage = function () {\n                                scope._forceShowMessage = ngModelCtrl.$invalid;\n                                scope.errorMessage = getMessage();\n                            };\n\n                            scope.hideMessage = function () {\n                                scope._forceShowMessage = false;\n                                scope.showMessage = false;\n                            };\n\n                            scope.$watch(function () {\n                                return ngModelCtrl.$pristine;\n                            }, function (isPristine) {\n                                if (isPristine) {\n                                    scope.showMessage = false;\n                                    scope._forceShowMessage = false;\n                                }\n                            });\n\n                            scope.setPristine = function () {\n                                ngModelCtrl.$setPristine();\n                            };\n\n                            scope.isInvalid = function () {\n                                return ngModelCtrl.$invalid;\n                            };\n\n\n                            //register the control into the parent directive\n                            vtFormCtrl.addControl({control: scope, element: elm, messageElement: messageElement});\n\n\n                            function showMessageIfNeeded() {\n                                if (ngModelCtrl.$invalid) {\n                                    scope.showMessage = true;\n                                    scope.errorMessage = getMessage();\n                                    elm.addClass(defaultOptions.errorClass);\n                                }\n                                else {\n                                    scope.showMessage = false;\n                                    scope.errorMessage = '';\n                                    elm.removeClass(defaultOptions.errorClass);\n                                }\n                            }\n\n                            function getMessage() {\n                                var errors = [], fieldValue = ngModelCtrl.$viewValue, type, msg;\n                                angular.forEach(ngModelCtrl.$error, function (val, key) {\n                                    if (val) {\n                                        errors.push(key);\n                                    }\n                                });\n                                type = ValidationsHelper.getPrioritizedErrorType(errors);\n                                msg = scope.messages && scope.messages[type] || vtFormCtrl.getMessage(type) || ValidationsHelper.getMessage(type);\n\n                                return ValidationsHelper.renderMessage(msg, type, elm, attrs.fieldName, fieldValue);\n                            }\n                        }\n\n\n                    }\n                }\n            }\n        });\n})();\n\n/**\n * Created by Gabriel_Grinberg on 6/13/14.\n */\n\n(function () {\n    'use strict';\n    angular.module('gg.vmsgs')\n        .directive('vmsgForm', function ($parse, ValidationsHelper) {\n            var defaultOptions = ValidationsHelper.defaultOptions;\n            return {\n                restrict: 'A',\n                require: 'form',\n                scope: {\n                    notificationTemplate: '@',\n                    messages: '='\n                },\n                priority: -1, //get it before the ngsubmit\n                controller: function ($scope) {\n                    var controls = $scope.controls = [];\n                    this.addControl = function (obj) {\n                        controls.push(obj);\n                    };\n                    this.removeControl = function (elem) {\n                        angular.forEach(controls, function (obj, i) {\n                            if (elem.name == obj.elem.name) {\n                                controls.splice(i, 1);\n                            }\n                        })\n                    };\n                    this.getControlMessageTrigger = function () {\n                        return $scope.controlsMessageTrigger;\n                    };\n\n                    this.getNotificationTemplate = function () {\n                        return $scope.notificationTemplate;\n                    };\n\n                    this.getMessage = function (type) {\n                        return $scope.messages && $scope.messages[type];\n                    };\n\n                },\n                compile: function () {\n\n                    return {\n                        pre: function (scope, elm, attrs) {\n                            scope.controlsMessageTrigger = attrs.controlsMessageTrigger;\n                            scope.notificationTemplate = attrs.notificationTemplate;\n                        },\n                        post: function (scope, elm, attrs, formCtrl) {\n                            //fixme -> does not work\n                            var fn = $parse(attrs.submitError);\n\n\n                            elm.bind('submit', function (e) {\n                                    formCtrl.$setDirty();\n\n                                    var invalidControl = getFirstInvalidControl(),\n                                        animateClass = attrs.animationClass || defaultOptions.animationClass;\n\n                                    angular.forEach(scope.controls, function (controlObj) {\n                                        scope.$apply(controlObj.control.forceShowMessage);\n                                    });\n\n\n                                    if (invalidControl) {\n                                        //console.log('Form is not valid', formController, scope.controls);\n                                        fn(scope, {$event: event});\n                                        //fixme - this causes a dependency with jQuery. Couldn't cancel the even without it..\n                                        e.stopImmediatePropagation();\n\n                                        e.preventDefault();\n\n                                        if (defaultOptions.scrollToFirstError) {\n                                            $('body').animate({scrollTop: invalidControl.element.offset().top - defaultOptions.scrollDistance}, defaultOptions.scrollSpeed, null, function () {\n                                                if (defaultOptions.focusFirstError) {\n                                                    invalidControl.element.focus();\n                                                }\n                                            })\n                                        }\n                                        else if (defaultOptions.focusFirstError) {\n                                            invalidControl.element.focus();\n                                        }\n\n                                        if (animateClass) {\n                                            angular.forEach(scope.controls, function (obj) {\n                                                var msgElm = obj.messageElement;\n                                                if (obj.control.isInvalid()) {\n                                                    msgElm.addClass(animateClass)\n                                                        .one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend',\n                                                        function () {\n                                                            msgElm.removeClass(animateClass)\n                                                        });\n                                                }\n                                            });\n                                        }\n                                    }\n                                }\n                            );\n\n                            scope.$watch(function () {\n                                return formCtrl.$pristine;\n                            }, function (isPristine, wasPristine) {\n                                if (isPristine && isPristine != wasPristine) {\n                                    angular.forEach(scope.controls, function (controlObj) {\n                                        controlObj.control.hideMessage();\n                                    });\n                                }\n                            });\n\n                            function getFirstInvalidControl() {\n                                var invalidControl = null;\n                                angular.forEach(scope.controls, function (controlObj) {\n                                    if (!invalidControl && controlObj.control.isInvalid())\n                                        invalidControl = controlObj;\n                                });\n                                return invalidControl;\n                            }\n\n                        }}\n\n                }\n\n            }\n        });\n})();\n\n\n/**\n * Created by Gabriel_Grinberg on 6/13/14.\n */\n\n(function () {\n    'use strict';\n    angular.module('gg.vmsgs')\n        .provider('ValidationsHelper', function () {\n            var customMessageRenders = {\n                minlength: function (fieldValue, element, fieldName) {\n                    var minimumLength = element.attr('ng-minlength');\n                    return '\"' + fieldValue + '\" is too short, at least ' + minimumLength + ' characters is required';\n                },\n                maxlength: function (fieldValue, element, fieldName) {\n                    var maximumLength = element.attr('ng-maxlength');\n                    return '\"' + fieldValue + '\" is too long, less than ' + maximumLength + ' characters is required';\n                }\n            };\n\n\n            var errorMessages = {\n                    email: '\"%FieldValue%\" is not a valid e-mail address. You must enter a valid email!',\n                    required: 'Field %FieldName% is required!',\n                    number: 'Please insert a valid number',\n                    fallback: 'There is a problem with this field. Please try again',\n                    min: 'This field must be higher than %minimum%',\n                    max: 'This field must be lower than %maximum%'\n                },\n                validMessages = {\n                    default: 'Good job!'\n                },\n                messageTriggers = {\n                    onBlur: 'blur',\n                    dontShow: 'none',\n                    immediate: 'immediate',\n                    onDirty: 'dirty'\n                },\n                defaultOptions = {\n                    inputMessageTrigger: messageTriggers.onBlur,\n                    scrollToFirstError: true,\n                    focusFirstError: true,\n                    scrollDistance: 50,\n                    scrollSpeed: 'fast',\n                    errorClass: 'validation-error',\n                    animationClass: '',\n                    baseTemplate: '<div ng-show=\"showMessage || _forceShowMessage\"></div>',\n                    notificationTemplate: '<span class=\"small text-danger\">{{errorMessage}}</span>'\n\n                },\n                typePriorities = {\n                    required: -1\n                };\n\n\n            this.setMessage = function (type, message) {\n                errorMessages[type] = message;\n                return this;\n            };\n\n            this.getMessage = function (type) {\n                return errorMessages[type];\n            };\n\n            this.setCustomRenderer = function (type, fn) {\n                customMessageRenders[type] = fn;\n                return this;\n            };\n\n            this.getCustomRender = function (type) {\n                return customMessageRenders[type];\n            };\n\n            this.setErrorClass = function (className) {\n                defaultOptions.errorClass = className;\n                return this;\n            };\n\n            this.setAnimationClass = function (className) {\n                defaultOptions.animationClass = className;\n                return this;\n            };\n\n            this.setTypePriority = function (type, priority) {\n                if (isNaN(priority)) throw new Error('Priority must be a number');\n                typePriorities[type] = priority;\n                return this;\n            };\n\n            this.setNotificationTemplate = function (template) {\n                if (!/{{\\s*errorMessage\\s*}}/.test(template)) {\n                    console.warn('Overriden templates must include {{errorMessage}} to properly display messages!');\n                }\n                defaultOptions.notificationTemplate = template;\n            };\n\n            this.setValidNotificationTemplate = function (template) {\n                if (!/{{\\s*validMessage\\s*}}/.test(template)) {\n                    console.warn('Overriden templates must include {{validMessage}} to properly display messages!');\n                }\n                defaultOptions.validMessageTemplate = template;\n            };\n\n\n            this.$get = function () {\n                //todo, separate to getType > getMessage > renderMessage\n\n                var api = {\n                    getType: function (type, element) {\n                        //add override to types based on the element. i.e, when an invalid number is entered, the error will be required and not number.\n                        return element.attr('type') == 'number' ? 'number' : type;\n                    },\n                    getMessage: function (type) {\n                        return errorMessages[type] || errorMessages.fallback;\n                    },\n                    renderMessage: function (message, type, element, fieldName, fieldValue) {\n                        var msg = message\n                            .replace('%FieldValue%', fieldValue)\n                            .replace('%FieldName%', fieldName || '');\n\n                        switch (type) {\n                            case 'min':\n                                msg.replace('%minimum%', element.attr('min'));\n                                break;\n\n                            case 'max':\n                                msg.replace('%maximum%', element.attr('max'));\n                                break;\n                        }\n\n                        return msg;\n                    },\n                    defaultOptions: defaultOptions,\n                    messageTriggers: messageTriggers,\n                    getPrioritizedErrorType: function (errors) {\n                        errors.sort(function (a, b) {\n                            return (typePriorities[b] || 0 ) - (typePriorities[a] || 0);\n                        });\n                        return errors[0];\n                    }\n                };\n\n                return api;\n            };\n\n\n        });\n})();\n","coverage":[null,null,null,null,null,1,null,1,null,null,null,null,null,null,null,null,1,null,1,null,9,null,null,9,null,null,null,null,null,null,null,11,null,11,11,11,null,null,null,11,null,null,null,null,null,null,null,null,11,11,11,null,null,11,null,9,33,33,null,null,9,null,null,null,null,null,null,null,null,null,null,null,1,10,null,2,1,null,null,1,null,1,null,0,0,null,null,11,169,null,39,20,null,null,null,null,11,3,3,null,null,11,0,0,null,null,11,169,null,14,11,11,null,null,null,11,0,null,null,11,1,null,null,null,null,11,null,null,1,54,18,18,18,null,null,36,36,36,null,null,null,1,21,21,28,22,null,null,21,21,null,21,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,9,9,null,null,null,null,null,null,null,null,9,9,11,null,9,0,0,0,null,null,null,9,8,null,null,9,11,null,null,9,19,null,null,null,null,null,9,null,9,9,null,null,null,9,null,null,9,1,null,1,null,null,1,3,null,null,null,1,null,1,null,1,null,1,null,1,1,0,0,null,null,null,0,0,null,null,1,0,0,0,0,null,null,0,null,null,null,null,null,null,null,null,9,182,null,10,0,0,null,null,null,null,1,1,1,3,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,9,null,0,0,null,null,0,0,null,null,null,null,9,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9,0,0,null,null,9,0,null,null,9,0,0,null,null,9,0,null,null,9,0,0,null,null,9,0,0,null,null,9,0,0,0,null,null,9,0,0,null,0,null,null,9,0,0,null,0,null,null,null,9,null,null,9,null,null,0,null,null,19,null,null,21,null,null,null,21,null,0,0,null,null,0,0,null,null,21,null,null,null,null,21,1,null,21,null,null,null,9,null,null,null,null,null,null]}],"git":{"head":{"id":"ref: refs/heads/gh-pages","author_name":"Unknown Author","author_email":"","committer_name":"Unknown Committer","committer_email":"","message":"Unknown Commit Message"},"branch":"","remotes":[]},"run_at":"2014-06-28T13:40:37.325Z"}